{"formatVersion":"1.0","generatedAt":"2022-02-28T19:52:48Z","generatedBy":{"name":"Dude Duderson"},"keywords":["Favorites"],"name":"My Favorites","overview":"Some of my favorite packages.","packages":[{"keywords":[],"license":{"name":"MIT","url":"https://raw.githubusercontent.com/siteline/SwiftUI-Introspect/master/LICENSE"},"readmeURL":"https://raw.githubusercontent.com/siteline/SwiftUI-Introspect/master/README.md","summary":"Introspect underlying UIKit components from SwiftUI","url":"https://github.com/siteline/SwiftUI-Introspect.git","versions":[{"defaultToolsVersion":"5.1.0","manifests":{"5.1.0":{"minimumPlatformVersions":[{"name":"macos","version":"10.13"},{"name":"ios","version":"11.0"},{"name":"tvos","version":"11.0"}],"packageName":"Introspect","products":[{"name":"Introspect","targets":["Introspect"],"type":{"library":["automatic"]}}],"targets":[{"moduleName":"Introspect","name":"Introspect"}],"toolsVersion":"5.1.0"}},"summary":"introspectSplitViewController, introspectColorWell, introspectButton, introspectTabView, + fixes","version":"0.1.4"},{"defaultToolsVersion":"5.1.0","manifests":{"5.1.0":{"minimumPlatformVersions":[{"name":"macos","version":"10.13"},{"name":"ios","version":"11.0"},{"name":"tvos","version":"11.0"}],"packageName":"Introspect","products":[{"name":"Introspect","targets":["Introspect"],"type":{"library":["automatic"]}}],"targets":[{"moduleName":"Introspect","name":"Introspect"}],"toolsVersion":"5.1.0"}},"version":"0.1.3"},{"defaultToolsVersion":"5.1.0","manifests":{"5.1.0":{"minimumPlatformVersions":[{"name":"macos","version":"10.13"},{"name":"ios","version":"11.0"},{"name":"tvos","version":"11.0"}],"packageName":"Introspect","products":[{"name":"Introspect","targets":["Introspect"],"type":{"library":["automatic"]}}],"targets":[{"moduleName":"Introspect","name":"Introspect"}],"toolsVersion":"5.1.0"}},"summary":"SPM: iOS 11, tvOS 11, macOS 10.13","version":"0.1.2"}]},{"keywords":["cache","filters","image","image-processor","ios","kingfisher","macos","swift","xcode"],"license":{"name":"MIT","url":"https://raw.githubusercontent.com/onevcat/Kingfisher/master/LICENSE"},"readmeURL":"https://raw.githubusercontent.com/onevcat/Kingfisher/master/README.md","summary":"A lightweight, pure-Swift library for downloading and caching images from the web.","url":"https://github.com/onevcat/Kingfisher.git","versions":[{"defaultToolsVersion":"5.1.0","manifests":{"5.1.0":{"minimumPlatformVersions":[{"name":"ios","version":"12.0"},{"name":"macos","version":"10.14"},{"name":"tvos","version":"12.0"},{"name":"watchos","version":"5.0"}],"packageName":"Kingfisher","products":[{"name":"Kingfisher","targets":["Kingfisher"],"type":{"library":["automatic"]}}],"targets":[{"moduleName":"Kingfisher","name":"Kingfisher"}],"toolsVersion":"5.1.0"}},"summary":"","version":"7.2.0"},{"defaultToolsVersion":"5.1.0","manifests":{"5.1.0":{"minimumPlatformVersions":[{"name":"ios","version":"12.0"},{"name":"macos","version":"10.14"},{"name":"tvos","version":"12.0"},{"name":"watchos","version":"5.0"}],"packageName":"Kingfisher","products":[{"name":"Kingfisher","targets":["Kingfisher"],"type":{"library":["automatic"]}}],"targets":[{"moduleName":"Kingfisher","name":"Kingfisher"}],"toolsVersion":"5.1.0"}},"summary":"","version":"7.1.2"},{"defaultToolsVersion":"5.1.0","manifests":{"5.1.0":{"minimumPlatformVersions":[{"name":"ios","version":"12.0"},{"name":"macos","version":"10.14"},{"name":"tvos","version":"12.0"},{"name":"watchos","version":"5.0"}],"packageName":"Kingfisher","products":[{"name":"Kingfisher","targets":["Kingfisher"],"type":{"library":["automatic"]}}],"targets":[{"moduleName":"Kingfisher","name":"Kingfisher"}],"toolsVersion":"5.1.0"}},"summary":"","version":"7.1.1"},{"defaultToolsVersion":"5.1.0","manifests":{"5.1.0":{"minimumPlatformVersions":[{"name":"ios","version":"10.0"},{"name":"macos","version":"10.12"},{"name":"tvos","version":"10.0"},{"name":"watchos","version":"3.0"}],"packageName":"Kingfisher","products":[{"name":"Kingfisher","targets":["Kingfisher"],"type":{"library":["automatic"]}}],"targets":[{"moduleName":"Kingfisher","name":"Kingfisher"}],"toolsVersion":"5.1.0"}},"summary":"","version":"6.3.1"},{"defaultToolsVersion":"5.1.0","manifests":{"5.1.0":{"minimumPlatformVersions":[{"name":"ios","version":"10.0"},{"name":"macos","version":"10.12"},{"name":"tvos","version":"10.0"},{"name":"watchos","version":"3.0"}],"packageName":"Kingfisher","products":[{"name":"Kingfisher","targets":["Kingfisher"],"type":{"library":["automatic"]}}],"targets":[{"moduleName":"Kingfisher","name":"Kingfisher"}],"toolsVersion":"5.1.0"}},"summary":"","version":"6.3.0"},{"defaultToolsVersion":"5.1.0","manifests":{"5.1.0":{"minimumPlatformVersions":[{"name":"ios","version":"10.0"},{"name":"macos","version":"10.12"},{"name":"tvos","version":"10.0"},{"name":"watchos","version":"3.0"}],"packageName":"Kingfisher","products":[{"name":"Kingfisher","targets":["Kingfisher"],"type":{"library":["automatic"]}}],"targets":[{"moduleName":"Kingfisher","name":"Kingfisher"}],"toolsVersion":"5.1.0"}},"summary":"","version":"6.2.1"}]},{"keywords":["cli","command-line","flag","option"],"license":{"name":"Apache-2.0","url":"https://raw.githubusercontent.com/apple/swift-argument-parser/main/LICENSE.txt"},"readmeURL":"https://raw.githubusercontent.com/apple/swift-argument-parser/main/README.md","summary":"Straightforward, type-safe argument parsing for Swift","url":"https://github.com/apple/swift-argument-parser.git","versions":[{"defaultToolsVersion":"5.5.0","manifests":{"5.5.0":{"packageName":"swift-argument-parser","products":[{"name":"ArgumentParser","targets":["ArgumentParser"],"type":{"library":["automatic"]}}],"targets":[{"moduleName":"ArgumentParser","name":"ArgumentParser"}],"toolsVersion":"5.5.0"}},"version":"1.0.3"},{"defaultToolsVersion":"5.5.0","manifests":{"5.5.0":{"packageName":"swift-argument-parser","products":[{"name":"ArgumentParser","targets":["ArgumentParser"],"type":{"library":["automatic"]}}],"targets":[{"moduleName":"ArgumentParser","name":"ArgumentParser"}],"toolsVersion":"5.5.0"}},"version":"1.0.2"},{"defaultToolsVersion":"5.5.0","manifests":{"5.5.0":{"packageName":"swift-argument-parser","products":[{"name":"ArgumentParser","targets":["ArgumentParser"],"type":{"library":["automatic"]}}],"targets":[{"moduleName":"ArgumentParser","name":"ArgumentParser"}],"toolsVersion":"5.5.0"}},"version":"1.0.1"},{"defaultToolsVersion":"5.2.0","manifests":{"5.2.0":{"packageName":"swift-argument-parser","products":[{"name":"ArgumentParser","targets":["ArgumentParser"],"type":{"library":["automatic"]}}],"targets":[{"moduleName":"ArgumentParser","name":"ArgumentParser"}],"toolsVersion":"5.2.0"}},"version":"0.5.0"},{"defaultToolsVersion":"5.2.0","manifests":{"5.2.0":{"packageName":"swift-argument-parser","products":[{"name":"ArgumentParser","targets":["ArgumentParser"],"type":{"library":["automatic"]}}],"targets":[{"moduleName":"ArgumentParser","name":"ArgumentParser"}],"toolsVersion":"5.2.0"}},"version":"0.4.4"},{"defaultToolsVersion":"5.2.0","manifests":{"5.2.0":{"packageName":"swift-argument-parser","products":[{"name":"ArgumentParser","targets":["ArgumentParser"],"type":{"library":["automatic"]}}],"targets":[{"moduleName":"ArgumentParser","name":"ArgumentParser"}],"toolsVersion":"5.2.0"}},"version":"0.4.3"}]}],"signature":{"certificate":{"issuer":{"commonName":"Apple Worldwide Developer Relations Certification Authority","organization":"Apple Inc.","organizationalUnit":"G3"},"subject":{"commonName":"Swift Package Collection: Bontouch AB","organization":"Bontouch AB","organizationalUnit":"TPWEY3KE9V","userID":"TPWEY3KE9V"}},"signature":"ewogICJhbGciIDogIlJTMjU2IiwKICAieDVjIiA6IFsKICAgICJNSUlGZHpDQ0JGK2dBd0lCQWdJUUcyRFJPZ3NCR0preHVZWWhGNlczZnpBTkJna3Foa2lHOXcwQkFRc0ZBREIxTVVRd1FnWURWUVFERER0QmNIQnNaU0JYYjNKc1pIZHBaR1VnUkdWMlpXeHZjR1Z5SUZKbGJHRjBhVzl1Y3lCRFpYSjBhV1pwWTJGMGFXOXVJRUYxZEdodmNtbDBlVEVMTUFrR0ExVUVDd3dDUnpNeEV6QVJCZ05WQkFvTUNrRndjR3hsSUVsdVl5NHhDekFKQmdOVkJBWVRBbFZUTUI0WERUSXlNREl5T0RFNU5UWTBNMW9YRFRJek1ESXlPREU1TlRZME1sb3dnWVF4R2pBWUJnb0praWFKay9Jc1pBRUJEQXBVVUZkRldUTkxSVGxXTVM0d0xBWURWUVFERENWVGQybG1kQ0JRWVdOcllXZGxJRU52Ykd4bFkzUnBiMjQ2SUVKdmJuUnZkV05vSUVGQ01STXdFUVlEVlFRTERBcFVVRmRGV1ROTFJUbFdNUlF3RWdZRFZRUUtEQXRDYjI1MGIzVmphQ0JCUWpFTE1Ba0dBMVVFQmhNQ1ZWTXdnZ0VpTUEwR0NTcUdTSWIzRFFFQkFRVUFBNElCRHdBd2dnRUtBb0lCQVFDMGs4bjhnNk80aXU5V1FiaENjSTRIMFJBSWRVb3FYaTlPaXIwZWNhNlZTckRqZ3VwUEwxOVZ2aWFmWHlFVXlJVkc1RG92TjRCZEYvcGVSWWRSRW4yM0VmWTVZVis5YUEvRWUwTmtmNm4yTmtVOFkxSUVGWkZFbEpXa1VKMW5aVThEZlZ3eVVERkhiSUxPTzRPcVRJWnJEM2pWZVlGWHVGYytDakI5WkowZ0xhRzBmK045R2xhaEZ2MFg2VkhtTHZScVhzYTVoSEp2MFdoZDM5eitKV0tsVERKUlgzQmNnY3IwWVNCUmxsWGZNcnE2cGhWTmgvSXNqQmRDTU0rSnhxRlJGdnExVFFVN0JTY2R6c0YvN0tzTkNIRFFEN29ubFFHVWJJVWlveEx2NGZnQjUwMzBEemVjY3FoZWoxMmJBcVo4d243dStvdzk1S0dDdHNVYU9IMzVBZ01CQUFHamdnSHhNSUlCN1RBTUJnTlZIUk1CQWY4RUFqQUFNQjhHQTFVZEl3UVlNQmFBRkFuK3dCV1ErYTlrQ3BJU3VTWW9Zd3lYN0tleU1FRUdDQ3NHQVFVRkJ3RUJCRFV3TXpBeEJnZ3JCZ0VGQlFjd0FZWWxhSFIwY0RvdkwyOWpjM0F1WVhCd2JHVXVZMjl0TDI5amMzQXdNeTEzZDJSeVp6TXhPVENDQVI0R0ExVWRJQVNDQVJVd2dnRVJNSUlCRFFZSktvWklodmRqWkFVQk1JSC9NSUhEQmdnckJnRUZCUWNDQWpDQnRneUJzMUpsYkdsaGJtTmxJRzl1SUhSb2FYTWdZMlZ5ZEdsbWFXTmhkR1VnWW5rZ1lXNTVJSEJoY25SNUlHRnpjM1Z0WlhNZ1lXTmpaWEIwWVc1alpTQnZaaUIwYUdVZ2RHaGxiaUJoY0hCc2FXTmhZbXhsSUhOMFlXNWtZWEprSUhSbGNtMXpJR0Z1WkNCamIyNWthWFJwYjI1eklHOW1JSFZ6WlN3Z1kyVnlkR2xtYVdOaGRHVWdjRzlzYVdONUlHRnVaQ0JqWlhKMGFXWnBZMkYwYVc5dUlIQnlZV04wYVdObElITjBZWFJsYldWdWRITXVNRGNHQ0NzR0FRVUZCd0lCRml0b2RIUndjem92TDNkM2R5NWhjSEJzWlM1amIyMHZZMlZ5ZEdsbWFXTmhkR1ZoZFhSb2IzSnBkSGt2TUJZR0ExVWRKUUVCL3dRTU1Bb0dDQ3NHQVFVRkJ3TURNQjBHQTFVZERnUVdCQlMrcnhQUzgzSC9QOW5LVHYwRDhBVVV6S0tkNVRBT0JnTlZIUThCQWY4RUJBTUNCNEF3RUFZS0tvWklodmRqWkFZQkl3UUNCUUF3RFFZSktvWklodmNOQVFFTEJRQURnZ0VCQUxaVU1DK09VSnFKVHY2NkRPWW5oZVdrcm5mMURXVWJmUno1eHVRQjNFVU5VYkpiYjMrRkpWbVNnbEdSdE43SVBtTHU3KzdzaDdUOW54TFBPQkswQTRDdFRmd2xBMms3WXE5bkZYMk9URWxYbE5uZVlKTzVmV3puZWgvdlYwS2ZKaGN0Z3p3K0hFS0JhSjRweDIxMlhrYnhtQUoxbGs1d1JEUTVIc1ZwSzE5aWhiRG80dW5ITDRvWEFURW5GQ0NwZ3UycE1uczJQSkZNbTUrQlR1WS9yU2w0UzJLTnRBRytIUDhDYWp5ZzBsZW9qWVpYUDliZVB3WWxxSHJldnRRa2Z2bzVaVWFmTFZuME94YjVWdzEwYm11VGhWZ1h0Zys2NndDUzArM015VnVUd1lhbmdmUWJ3dG5aMXBPVGJjYm1NSGFHYWZZQzVIM0pYcEQxZEw4R2lNYz0iCiAgXQp9..YZEpFwEJw0-hb1ldW3StdhQcThK76bipCFojNWpZIWlYQySttLp2bFn3ICcQj_vbrxpTGg1xwXS3ADvd3R2ZOACgTa2pWz8nvVuYKBnrNIucR3prmLr85sP-vtzv4AgzkwhsbgYFGa_EPQV5s9myfd7LtGhX76uShOwk7uOAk9qjJMZdhjdCkp_7wB6bogRlH767o7DpZv647-QlgGDkAq3JEyXdLJqEdzPIQxjuy_5JvKP06y2j8Ef22ozwYngyYvJbEyFUjmH6v2d2pDR-B60tJZh0Kt0pAozQwi02mnQ44l0B1u5f9AADqzDUtd404_xwA8MNJoZXdXXrPBhqtQ"}}